<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="formatError" xml:space="preserve">
    <value>错误格式</value>
  </data>
  <data name="ioError" xml:space="preserve">
    <value>未能读取档案</value>
  </data>
  <data name="unknownError" xml:space="preserve">
    <value>未知错误</value>
  </data>
  <data name="emptyArgument" xml:space="preserve">
    <value>空置参数</value>
  </data>
  <data name="unknownReference" xml:space="preserve">
    <value>未知参照</value>
  </data>
  <data name="noBracket" xml:space="preserve">
    <value>缺少括号</value>
  </data>
  <data name="unknownFunctionName" xml:space="preserve">
    <value>未知函数名称</value>
  </data>
  <data name="unknownDotPara" xml:space="preserve">
    <value>未知的dot参数名称</value>
  </data>
  <data name="signText" xml:space="preserve">
    <value>右键点击以生成</value>
  </data>
  <data name="dataLargerThan7" xml:space="preserve">
    <value>错误data数值: data不能大于7</value>
  </data>
  <data name="dataFormatError" xml:space="preserve">
    <value>data前缀格式错误: 格式必须为 "data:x command", 那里应该有一个空格符号</value>
  </data>
  <data name="dataNotNum" xml:space="preserve">
    <value>错误data数值: 非数字/byte</value>
  </data>
  <data name="newFormatError" xml:space="preserve">
    <value>new命令格式错误</value>
  </data>
  <data name="newCoorError" xml:space="preserve">
    <value>new命令坐标错误: 非数字</value>
  </data>
  <data name="statsFormatError" xml:space="preserve">
    <value>stats命令格式错误</value>
  </data>
  <data name="commandTooLong" xml:space="preserve">
    <value>单一命令过长</value>
  </data>
  <data name="cannotInitBackup" xml:space="preserve">
    <value>不能设置备份档案 本生成器崩溃后可能会失去一切的资料，请小心保存</value>
  </data>
  <data name="warn" xml:space="preserve">
    <value>提示</value>
  </data>
  <data name="wrongTheme" xml:space="preserve">
    <value>错误theme名称</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>错误!</value>
  </data>
  <data name="Green" xml:space="preserve">
    <value>绿</value>
  </data>
  <data name="Blue" xml:space="preserve">
    <value>蓝</value>
  </data>
  <data name="ColorHex" xml:space="preserve">
    <value>颜色(Hex十六进制)</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>修改颜色</value>
  </data>
  <data name="AddColor" xml:space="preserve">
    <value>增加颜色</value>
  </data>
  <data name="generate" xml:space="preserve">
    <value>生成</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="math_help" xml:space="preserve">
    <value>支持的运算符: +, -, *, /, %(取余), +=, -=, *=, /=, %=, =\n运算子: 数字(整数), &lt;选择器&gt;.&lt;选择器objective&gt;, &lt;玩家名&gt;.&lt;选择器objective&gt;\n支持括号\n例子: @e.scb = (@p.scb + 1)*3</value>
  </data>
</root>